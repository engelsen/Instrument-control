% Class for controlling 4-channel Tektronix TBS scopes. 
% Tested with TBS2074

classdef MyTbs < MyTekScope
    
    methods (Access = public)
        function this = MyTbs(varargin)
            this@MyTekScope(varargin{:});
            
            % 4e7 is the maximum trace size of DPO4034-3034 
            % (20 mln point of 2-byte integers)
            this.Comm.InputBufferSize = 4.1e7; %byte
            
            this.knob_list = lower({'GPKNOB','HORZPos','HORZScale', ...
                'TRIGLevel','VERTPOS','VERTSCALE'});
        end
    end
    
    methods (Access = protected)
        function createCommandList(this)
            addCommand(this,'channel',':DATa:SOUrce',...
                'default',1,...
                'format','CH%i',...
                'info','Channel from which the data is transferred');
            
            addCommand(this, 'ctrl_channel', ':SELect:CONTROl',...
                'default',1,...
                'format','CH%i',...
                'info','Channel currently selected in the scope display');
            
            addCommand(this, 'point_no', ':HORizontal:RECOrdlength',...
                'default', 200000,...
                'value_list', {2000, 20000, 200000, 2000000, 20000000},...
                'format','%i',...
                'info','Numbers of points in the scope trace');
            
            % time scale in s per div
            addCommand(this, 'time_scale',':HORizontal:SCAle',...
                'default',10E-3,...
                'format','%e',...
                'info','Time scale (s/div)');  
            
            % trigger level
            addCommand(this, 'trig_lev', ':TRIGger:A:LEVel',...
                'default',1,...
                'format','%e');
            
            % trigger slope
            addCommand(this, 'trig_slope', ':TRIGger:A:EDGE:SLOpe',...
                'default', 'RISe', 'value_list',{'RISe','FALL'},...
                'format','%s');
            
            % trigger source
            addCommand(this, 'trig_source', ':TRIGger:A:EDGE:SOUrce',...
                'default', 'AUX', 'value_list', {'CH1','CH2','CH3','CH4',...
                'LINE'},...
                'format','%s');
            
            % trigger mode
            addCommand(this, 'trig_mode', ':TRIGger:A:MODe',...
                'default', 'AUTO', 'value_list',{'AUTO','NORMal'},...
                'format','%s');
            
            % state of the data acquisition by the scope
            addCommand(this, 'acq_state', ':ACQuire:STATE',...
                'default',true,...
                'format','%b',...
                'info','State of data acquisition by the scope');
            
            % acquisition mode
            addCommand(this, 'acq_mode', ':ACQuire:MODe',...
                'default', 'HIRes', ...
                'value_list',{'SAMple','PEAKdetect','HIRes','AVErage'},...
                'format','%s',...
                'info',['Acquisition mode: sample, peak detect, ',...
                'high resolution, average']);
           
            % Parametric commands
            for i = 1:this.N_CHANNELS
                i_str = num2str(i);
                % coupling, AC, DC or GND
                addCommand(this,...
                    ['cpl',i_str],[':CH',i_str,':COUP'],...
                    'default','DC', 'value_list', {'AC','DC','GND'},...
                    'format','%s',...
                    'info','Channel coupling: AC, DC or GND');              
                % offset
                addCommand(this,...
                    ['offset',i_str],[':CH',i_str,':OFFSet'], ...
                    'default',0,...
                    'format','%e',...
                    'info','(V)');
                % scale, V/Div
                addCommand(this,...
                    ['scale',i_str],[':CH',i_str,':SCAle'], ...
                    'default',1,...
                    'format','%e',...
                    'info','Channel y scale (V/div)');
                % channel enabled
                addCommand(this,...
                    ['enable',i_str],[':SELect:CH',i_str], ...
                    'default',true,...
                    'format','%b',...
                    'info','Channel enabled');
            end
        end
        
        function y_data = readY(this)
                
            % Configure data transfer: binary format and two bytes per 
            % point. Then query the trace. 
            this.Comm.ByteOrder = 'bigEndian';

            writeStrings(this, ...
                ':WFMInpre:ENCdg BINary', ...
                ':DATA:WIDTH 2', ...
                ':DATA:STARt 1', ...
                sprintf(':DATA:STOP %i', this.point_no), ...
                ':CURVE?');

            y_data = double(binblockread(this.Comm, 'int16'));
            
            % Read the terminating character
            fscanf(this.Comm, '%s');
        end
    end
end