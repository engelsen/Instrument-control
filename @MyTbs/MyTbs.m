% Class for controlling 4-channel Tektronix TBS scopes. 
% Tested with TBS2074

classdef MyTbs < MyScpiInstrument
    properties (SetAccess=protected, GetAccess=public)
        % List of the physical knobs, which can be rotated programmatically
        knob_list = {'GPKNOB','HORZPos','HORZScale',...
            'TRIGLevel','VERTPOS','VERTSCALE'};
    end
    
    properties (Constant=true)
        N_CHANNELS = 4; % number of channels
    end
    
    methods (Access=public)
        function this=MyTbs(interface, address, varargin)
            this@MyScpiInstrument(interface, address, varargin{:});
            % 4e7 is the maximum trace size of DPO4034-3034 
            %(20 mln point of 2-byte integers)
            this.Device.InputBufferSize = 4.1e7; %byte 
            this.Trace.name_x='Time';
            this.Trace.name_y='Voltage';
            
            this.Device.ByteOrder='bigEndian';
        end
        
        function readTrace(this)
            %set data format to be signed integer, reversed byte order
            fprintf(this.Device,':WFMInpre:ENCdg BINary');
            %2 bytes per measurement point
            % read the entire trace
            fprintf(this.Device,...
                ':DATA:WIDTH 2;STARt 1;STOP %i',this.point_no);
            fprintf(this.Device,':CURVE?');
            y_data = int16(binblockread(this.Device,'int16'));
            
            % read the terminating character
            fscanf(this.Device,'%s');
            
            % Reading the relevant parameters from the scope
            readProperty(this,'unit_y','unit_x',...
                'step_x','step_y','x_zero','y_zero','y_offset');
                        
            % Calculating the y data
            y = (double(y_data)-this.y_offset)*this.step_y+this.y_zero; 
            n_points=length(y);
            % Calculating the x axis
            x = linspace(this.x_zero,...
                this.x_zero+this.step_x*(n_points-1),n_points);
            
            this.Trace.x = x;
            this.Trace.y = y;
            % Discard "" when assiging the Trace labels
            this.Trace.unit_x = this.unit_x(2:end-1);
            this.Trace.unit_y = this.unit_y(2:end-1);
            triggerNewData(this);
        end
        
        function acquireContinuous(this)
            openDevice(this);
            fprintf(this.Device,...
                ':ACQuire:STOPAfter RUNSTop;:ACQuire:STATE ON');
            closeDevice(this);
        end
        
        function acquireSingle(this)
            openDevice(this);
            fprintf(this.Device,...
                ':ACQuire:STOPAfter SEQuence;:ACQuire:STATE ON');
            closeDevice(this);
        end
        
        function turnKnob(this,knob,nturns)
            openDevice(this);
            fprintf(this.Device, sprintf(':FPAnel:TURN %s,%i',knob,nturns));
            closeDevice(this);
        end
    end
    
    %% Protected functions
    methods (Access=protected)
        function createCommandList(this)
            addCommand(this,'channel',':DATa:SOUrce',...
                'default',1,...
                'fmt_spec','CH%i',...
                'info','Channel from which the data is transferred');
            addCommand(this, 'ctrl_channel', ':SELect:CONTROl',...
                'default',1,...
                'fmt_spec','CH%i',...
                'info','Channel currently selected in the scope display');
            % units and scale for x and y waveform data
            addCommand(this,'unit_x',':WFMOutpre:XUNit','access','r',...
                'classes',{'char'});
            addCommand(this,'unit_y',':WFMOutpre:YUNit','access','r',...
                'classes',{'char'});
            addCommand(this,'step_y',':WFMOutpre:YMUlt','access','r',...
                'classes',{'numeric'});
            addCommand(this,'step_x',':WFMOutpre:XINcr','access','r',...
                'classes',{'numeric'});
            addCommand(this,'x_zero',':WFMOutpre:XZEro','access','r',...
                'classes',{'numeric'});
            addCommand(this,'y_zero',':WFMOutpre:YZEro','access','r',...
                'classes',{'numeric'});
            addCommand(this,'y_offset',':WFMOutpre:YOFf','access','r',...
                'classes',{'numeric'}); 
            addCommand(this, 'point_no',':HORizontal:RECOrdlength',...
                'default', 200000,...
                'val_list', {2000, 20000, 200000, 2000000, 20000000},...
                'fmt_spec','%i',...
                'info','Numbers of points in the scope trace');
            % time scale in s per div
            addCommand(this, 'time_scale',':HORizontal:SCAle',...
                'default',10E-3,...
                'fmt_spec','%e',...
                'info','Time scale (s/div)');           
            % trigger level
            addCommand(this, 'trig_lev', ':TRIGger:A:LEVel',...
                'default',1,...
                'fmt_spec','%e');
            % trigger slope
            addCommand(this, 'trig_slope', ':TRIGger:A:EDGE:SLOpe',...
                'default', 'RISe', 'val_list',{'RISe','FALL'},...
                'fmt_spec','%s');
            % trigger source
            addCommand(this, 'trig_source', ':TRIGger:A:EDGE:SOUrce',...
                'default', 'AUX', 'val_list', {'CH1','CH2','CH3','CH4',...
                'LINE'},...
                'fmt_spec','%s');
            % trigger mode
            addCommand(this, 'trig_mode', ':TRIGger:A:MODe',...
                'default', 'AUTO', 'val_list',{'AUTO','NORMal'},...
                'fmt_spec','%s');
            % state of the data acquisition by the scope
            addCommand(this, 'acq_state', ':ACQuire:STATE',...
                'default',true,...
                'fmt_spec','%b',...
                'info','State of data acquisition by the scope');
            % acquisition mode
            addCommand(this, 'acq_mode', ':ACQuire:MODe',...
                'default', 'HIRes', ...
                'val_list',{'SAMple','PEAKdetect','HIRes','AVErage'},...
                'fmt_spec','%s',...
                'info',['Acquisition mode: sample, peak detect, ',...
                'high resolution, average']);
           
            % Parametric commands
            for i = 1:this.N_CHANNELS
                i_str = num2str(i);
                % coupling, AC, DC or GND
                addCommand(this,...
                    ['cpl',i_str],[':CH',i_str,':COUP'],...
                    'default','DC', 'val_list', {'AC','DC','GND'},...
                    'fmt_spec','%s',...
                    'info','Channel coupling: AC, DC or GND');              
                % offset
                addCommand(this,...
                    ['offset',i_str],[':CH',i_str,':OFFSet'], ...
                    'default',0,...
                    'fmt_spec','%e',...
                    'info','(V)');
                % scale, V/Div
                addCommand(this,...
                    ['scale',i_str],[':CH',i_str,':SCAle'], ...
                    'default',1,...
                    'fmt_spec','%e',...
                    'info','Channel y scale (V/div)');
                % channel enabled
                addCommand(this,...
                    ['enable',i_str],[':SELect:CH',i_str], ...
                    'default',true,...
                    'fmt_spec','%b',...
                    'info','Channel enabled');
            end
        end
    end
end