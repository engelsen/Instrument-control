% Class for NewData events that are generated by MyDataSource and its
% subclasses, including MyInstrument
%
% Note: traces must be passed by value in order to prevent race condition 
% when multiple NewData events are triggered by the same instrument 
% in a short period of time. Passing by value makes sure that the traces 
% are not modified before they are received by Daq.

classdef MyNewDataEvent < event.EventData
    
    properties (Access = public)
        
        % Name of the instrument that triggered the event. Usefult for
        % passing the event data forward, e.g. by triggering 
        % NewDataWithHeaders 
        src_name = 'UnknownInstrument'
        
        % Cell array of trace objects 
        traces = {}
        
        % If false then MyCollector does not acquire new measurement  
        % headers for this trace. Setting new_header = false allows  
        % transferring an existing trace to Daq by triggering NewData.
        new_header = true
        
        % A character string or cellstring containing optional tags 
        % for the traces
        trace_tags = {}
    end
    
    methods 
        
        % Use parser to process properties supplied as name-value pairs via
        % varargin
        function this = MyNewDataEvent(varargin)
            P = MyClassParser(this);
            processInputs(P, this, varargin{:});
        end
    end
    
    %% Set and get methods
    
    methods
        
        % Ensures that the source name is a valid Matlab variable
        function set.src_name(this, str)
            assert(ischar(str), ['The value assigned to ''src_name'' ' ...
                'must be char'])
            
            if ~isempty(str)
                str = matlab.lang.makeValidName(str);
            else
                str = 'UnknownInstrument';
            end
            
            this.src_name = str;
        end
        
        function set.traces(this, val)
            assert(isa(val, 'MyTrace') || (iscell(val) && ...
                all(cellfun(@(x)isa(x, 'MyTrace'), val))), ...
                ['''traces'' must be a derivative of MyTrace or a ' ...
                'cell array of such.'])
            
            if isa(val, 'MyTrace')
                
                % A single trace can be given directly, it is 
                % wrapped in a cell for uniformity
                val = {val};
            end
            
            this.traces = val;
        end
        
        function set.trace_tags(this, val)
            assert(ischar(val) || iscellstr(val), ['The value ' ...
                'assigned to ''trace_tags'' must be a character string '...
                'or a cell of character strings.']) %#ok<ISCLSTR>
            
            if ischar(val)
                
                % A single tag can be given as character string, it is 
                % converted to cell array for uniformity
                val = {val};
            end
            
            this.trace_tag = val;
        end
    end
end